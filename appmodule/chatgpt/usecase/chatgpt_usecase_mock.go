// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/omegaatt36/chatgpt-telegram/appmodule/chatgpt/usecase (interfaces: ChatGPTUseCase)

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockChatGPTUseCase is a mock of ChatGPTUseCase interface.
type MockChatGPTUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockChatGPTUseCaseMockRecorder
}

// MockChatGPTUseCaseMockRecorder is the mock recorder for MockChatGPTUseCase.
type MockChatGPTUseCaseMockRecorder struct {
	mock *MockChatGPTUseCase
}

// NewMockChatGPTUseCase creates a new mock instance.
func NewMockChatGPTUseCase(ctrl *gomock.Controller) *MockChatGPTUseCase {
	mock := &MockChatGPTUseCase{ctrl: ctrl}
	mock.recorder = &MockChatGPTUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatGPTUseCase) EXPECT() *MockChatGPTUseCaseMockRecorder {
	return m.recorder
}

// Stream mocks base method.
func (m *MockChatGPTUseCase) Stream(arg0 context.Context, arg1 string) (<-chan string, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream", arg0, arg1)
	ret0, _ := ret[0].(<-chan string)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// Stream indicates an expected call of Stream.
func (mr *MockChatGPTUseCaseMockRecorder) Stream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockChatGPTUseCase)(nil).Stream), arg0, arg1)
}
