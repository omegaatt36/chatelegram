// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/omegaatt36/chatelegram/appmodule/gpt/usecase (interfaces: GPTUseCase)

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGPTUseCase is a mock of GPTUseCase interface.
type MockGPTUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGPTUseCaseMockRecorder
}

// MockGPTUseCaseMockRecorder is the mock recorder for MockGPTUseCase.
type MockGPTUseCaseMockRecorder struct {
	mock *MockGPTUseCase
}

// NewMockGPTUseCase creates a new mock instance.
func NewMockGPTUseCase(ctrl *gomock.Controller) *MockGPTUseCase {
	mock := &MockGPTUseCase{ctrl: ctrl}
	mock.recorder = &MockGPTUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGPTUseCase) EXPECT() *MockGPTUseCaseMockRecorder {
	return m.recorder
}

// CompletionStream mocks base method.
func (m *MockGPTUseCase) CompletionStream(arg0 context.Context, arg1 string) (<-chan string, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompletionStream", arg0, arg1)
	ret0, _ := ret[0].(<-chan string)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// CompletionStream indicates an expected call of CompletionStream.
func (mr *MockGPTUseCaseMockRecorder) CompletionStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompletionStream", reflect.TypeOf((*MockGPTUseCase)(nil).CompletionStream), arg0, arg1)
}
